package dns_spoofing

	port type Port()
	port type Port1Data( int address)
	port type Port2Data( bool success, int address )
	port type Port2Data2( int address, float money )

	 /*
	  * connectors
	  */

  connector type Request(Port user, Port cache)
  		define user cache
  end

	connector type Reply( Port1Data user, Port1Data cache)
		define user cache
		on user cache down {user.address = cache.address; }
	end

	connector type Daemon( Port2Data adversary, Port1Data cache)
		define adversary cache
		on adversary cache down { if(adversary.success) then cache.address = adversary.address; fi }
	end

	connector type Connect(Port user, Port b_network, Port ad_network)
		define user b_network ad_network
	end

	connector type Transfer(Port2Data2 user, Port2Data2 b_network, Port2Data2 ad_network)
		define user b_network ad_network
		on user b_network ad_network down {if (user.address == ad_network.address) then ad_network.money =  user.money; else  b_network.money = user.money; fi user.money = 0;  }
	end

	atom type User()
		// Data variables
  		data int received_address // network address
  		data float money                // money amount

		// Instantiate clocks
		clock x unit nanosecond

		port Port done()
		// Exported ports
                                    export port Port request()
  		export port Port1Data  reply(received_address)
		export port Port connect()
		export port Port2Data2 transfer (received_address, money)

		// Locations
  		place u0, u1, u2, u3, u4

		// Initial location declarations
		initial to u0 do { money = 1000; x = 0; received_address = 0;}

		// Transitions
  		on request     from u0  to u1
      		provided  (x < 1000)
		delayable
		do {x = 0;}

  		on reply     from u1  to u2
		delayable
		do { x = 0; }

  		on connect     from u2  to u3
		delayable
		do { x = 0; }

  		on transfer     from u3  to u4
		delayable
		do {  x = 0; }

  		on done     from u4  to u4
		delayable
		do {  x = 0; received_address = 0;}
	end

	atom type Attacker()
		// Data variables
  		data int fake_address
  		data int reply_address
    		data bool success

		// Instantiate clocks
		clock y unit nanosecond

  		port Port  done()
    		port Port  guess()

		// Exported ports
		export port Port request()
    		export port Port1Data reply(reply_address)
		export port Port2Data daemon(success, fake_address)

		// Locations
  		place a0, a1, a2

		// Initial location declarations
		initial to a0 do {y = 0; fake_address = 99999; success = false;}

		// Transitions
		on request from a0 to a1
    		provided (y<1000)
		delayable

  		on reply   from a1  to a0
		delayable

		@stochastic(dist="custom", clk=y, param="birthday_dist.txt")
  		on guess   from a0  to a0
		delayable
		do { success = true; }

    		on daemon   from a0  to a2
    		delayable
    		do { y = 0; reply_address = 0;}

    		on done   from a2  to a2
    		delayable
    		do { y = 0; success = false;}
	end

	atom type Cache()
		// Data variables
  		data int send_address

		// Instantiate clocks
		clock cl unit nanosecond

		// Exported ports
		export port Port request()
		export port Port1Data daemon  (send_address)
		export port Port1Data reply(send_address)

		// Locations
  		place c0, c1

		// Initial location declarations
		initial to c0 do { send_address = 77777; cl = 0; }

		// Transitions
		on request from c0 to c1
		delayable
		do {cl = 0; }

  		on reply     from c1 to c0
   	 	provided  (cl<50)
		do { cl = 0;}

  		on daemon     from c1  to c1
		delayable
		do { cl = 0;}
	end

	atom type BitcoinNetwork()
		// Data variables
  	data int cur_address	// network address
		data float money

		// Instantiate clocks
		clock x unit nanosecond

  		port Port  done()
		// Exported ports
  		export port Port  connect()
		export port Port2Data2  transfer(cur_address, money)

		// Locations
  		place b0, b1

		// Initial location declarations
		initial to b0 do {cur_address = 77777; money = 0; x = 0;}

		// Transitions
  		on connect     from b0  to b0
		delayable
		do { x = 0; money = 0;}

  		on transfer     from b0  to b1
		delayable
		do { x = 0; }

  		on done     from b1  to b1
		delayable
		do { x = 0; }

	end

  	atom type SpoofedNetwork()
		// Data variables
  		data int cur_address	// network address
		data float money

		// Instantiate clocks
		clock x unit nanosecond

  		port Port  done()
		// Exported ports
  		export port Port  connect()
		export port Port2Data2  transfer(cur_address, money)

		// Locations
  		place s0, s1

		// Initial location declarations
		initial to s0 do {cur_address = 99999; money = 0; x = 0;}

		// Transitions
  		on connect     from s0  to s0
		delayable
		do { x = 0; money = 0;}

  		on transfer     from s0  to s1
		delayable
		do { x = 0; }

  		on done     from s1 to s1
		delayable
		do { x = 0; }

	end


	// Compound types definitions
	compound type Compound()
		component User user()
		component Attacker  attacker()
		component Cache cache()
		component BitcoinNetwork bit_network()
		component SpoofedNetwork spoof_network()

		connector Request request_adversary(attacker.request, cache.request)
		connector Reply reply_adversary(attacker.reply, cache.reply)
	  	connector Daemon launch_daemon(attacker.daemon, cache.daemon)

    		connector Request request_user(user.request, cache.request)
    		connector Reply reply_user(user.reply, cache.reply)


		connector Connect connect(user.connect, bit_network.connect, spoof_network.connect)
		connector Transfer transfer(user.transfer, bit_network.transfer, spoof_network.transfer)
	end
end